#!/bin/sh
#
# Try to derive Lua compilation and installation paths. The following
# environment variables are used for hinting
#
# 	PATH CC CPPFLAGS PREFIX BINDIR LIBDIR DATADIR INCLUDEDIR
#
# while these are presumed correct if set and not null
#
# 	LUAINCLUDE LUAPATH LUACPATH LUAC
#
# The script tries to ensure version consistency according to the detected
# compilation environment.
#
# The first step is to find our lua.h header, if any, to determine our major
# and minor Lua API version. Everything flows from the version number.
#
# The most recent Lua API version is preferred. If both LuaJIT and Lua are
# detected, LuaJIT 2.x is preferred over Lua 5.2 and LuaJIT 1.x over Lua
# 5.1.
#
# Run `./lua.path -h` for usage help.
#
set -e # strict errors
set -u # don't expand unbound variables
\unalias -a # no surprises


getversion() {
	printf "#include <$1>\n<<<<$2>>>>\n" \
	| ${CC:-cc} ${CPPFLAGS:-} -E - 2>/dev/null \
	| sed -ne '
		s/^.*<<<< *\([0123456789]*\) *>>>>.*$/\1/
		t Found
		d
		:Found
		p
		q
	'
}


#
# Deriving LUAINCLUDE is the most important, because module installation
# paths and luac selection depend on the Lua implementation and version.
#
luainclude() {
	LUA_D=
	LUA_V=0

	JIT_D=
	JIT_V=0

	V="$(getversion lua.h LUA_VERSION_NUM)"

	if [ -n "$V" ]; then
		LUA_V="$V"
	fi

	V="$(getversion luajit.h LUAJIT_VERSION_NUM)"

	if [ -n "$V" ]; then
		JIT_V="$V"
	fi

	I="${INCLUDEDIR:-${PREFIX:-/usr}/include}"

	for F in $(find "$I" -name lua.h 2>/dev/null); do
		V="$(getversion $F LUA_VERSION_NUM)"

		if [ "${V:-0}" -gt "$LUA_V" ]; then
			LUA_D="${F%%/lua.h}"
			LUA_V="$V"
		fi
	done

	for F in $(find "$I" -name luajit.h 2>/dev/null); do
		V="$(getversion $F LUAJIT_VERSION_NUM)"

		if [ "${V:-0}" -gt "$JIT_V" ]; then
			JIT_D="${F%%/luajit.h}"
			JIT_V="$V"
		fi
	done

	if [ "$JIT_V" -ge 20000 ]; then
		echo "$JIT_D"
	elif [ "$JIT_V" -gt 0 -a "$LUA_V" -le 501 ]; then
		echo "$JIT_D"
	else
		echo "$LUA_D"
	fi
}


luapath() {
	echo "0"	
}


usage() {
	cat <<- EOF
	usage: $(basename $0) [-p:h] include|path|cpath|luac|cppflags|version
	  -p PATH  compilation and installation prefix path
	  -h       print this usage message

	  include   preprocessor -I path to reach Lua headers (possibly empty)
	  path      installation path of Lua modules
	  cpath     installation path of Lua C modules
	  luac      luac command path
	  cppflags  CPPFLAGS plus lua.h include path, if not empty
	  version   derived Lua API version
	
	Report bugs to <william@25thandClement.com>
	EOF
}


while getopts p:h OPT; do
	case "${OPT}" in
	p)
		PREFIX="$OPTARG"
		;;
	h)
		usage
		exit 0
		;;
	*)
		usage >&2
		exit 1
		;;
	esac
done

shift $(($OPTIND - 1))


: ${LUAINCLUDE:=$(luainclude)}
: ${LUA_VERSION_NUM:=$(getversion "${LUAINCLUDE:+${LUAINCLUDE}/}lua.h" LUA_VERSION_NUM)}
: ${LUA_VERSION_NUM:=502}
: ${LUA_VERSION_MAJOR:=$((${LUA_VERSION_NUM} / 100))}
: ${LUA_VERSION_MINOR:=$((${LUA_VERSION_NUM} % 100))}
: ${PREFIX:=/usr}
: ${DATADIR:=${PREFIX}/share}
: ${LIBDIR:=${PREFIX}/lib}
: ${BINDIR:=${PREFIX}/bin}

while [ $# -ge 1 ]; do
	case "$1" in
	include)
		echo "${LUAINCLUDE}"
		;;
	path)
		echo "${LUAPATH:=${DATADIR}/lua/${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR}}"
		;;
	cpath)
		echo "${LUACPATH:=${LIBDIR}/lua/${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR}}"
		;;
	luac)
		if [ -z "${LUAC:-}" ]; then
			for C in "${BINDIR}/luac" "$(command -v luac)"; do
				if [ -x "$C" ]; then
					V="$(${C} -v 2>/dev/null | sed -ne 's/^Lua \([0123456789]*\.[0123456789]*\).*/\1/p')"
					: ${V:=0.0}

					if [ "$LUA_VERSION_MAJOR" -eq "${V%%.*}" -a "$LUA_VERSION_MINOR" -eq "${V##*.}" ]; then
						: ${LUAC:=${C}}
					fi
				fi
			done
		fi

		echo "${LUAC:=:}"

		;;
	cppflags)
		echo "${CPPFLAGS:-}${LUAINCLUDE:+${CPPFLAGS:+ }-I${LUAINCLUDE}}"
		;;
	version)
		echo "${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR}"
		;;
	*)
		usage >&2
		exit 1
		;;
	esac

	shift
done
